/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Workout = {
  _id: string;
  _type: "workout";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: string;
  date?: string;
  durationInSeconds?: number;
  exercises?: Array<{
    exercise?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "Ejercicio";
    };
    sets?: Array<{
      reps?: number;
      weight?: number;
      weightUnit?: "lbs" | "kg";
      _type: "setLog";
      _key: string;
    }>;
    _type: "exerciseLog";
    _key: string;
  }>;
};

export type Ejercicio = {
  _id: string;
  _type: "Ejercicio";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  nombre?: string;
  descripcion?: string;
  dificultad?: "principiante" | "intermedio" | "avanzado";
  imagen?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  };
  videoUrl?: string;
  isActive?: boolean;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Workout | Ejercicio | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../src/app/(app)/(tabs)/active-workout.tsx
// Variable: findExerciseQuery
// Query: *[_type == "exercise" && lower(nombre) == lower($nombre)][0] {    _id,    nombre  }
export type FindExerciseQueryResult = null;

// Source: ../src/app/(app)/(tabs)/exercises.tsx
// Variable: exercisesQuery
// Query: *[_type == "Ejercicio" && isActive == true] | order(nombre asc) {  _id,  _rev,  _type,  nombre,  descripcion,  dificultad,  imagen {  _type,    asset->{      _id,      url    },    alt,    caption  },  videoUrl,  isActive,  _createdAt,  _updatedAt}
export type ExercisesQueryResult = Array<{
  _id: string;
  _rev: string;
  _type: "Ejercicio";
  nombre: string | null;
  descripcion: string | null;
  dificultad: "avanzado" | "intermedio" | "principiante" | null;
  imagen: {
    _type: "image";
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
    caption: string | null;
  } | null;
  videoUrl: string | null;
  isActive: boolean | null;
  _createdAt: string;
  _updatedAt: string;
}>;

// Source: ../src/app/(app)/(tabs)/history/index.tsx
// Variable: getWorkoutsQuery
// Query: *[_type == "workout" && userId == $userId] | order(date desc) {    _id,    date,    durationInSeconds,    exercises[] {    exercise->{        _id,        nombre        },      sets[] {        reps,        weight,        weightUnit,        _type,        _key,      },        _type,        _key    }  }
export type GetWorkoutsQueryResult = Array<{
  _id: string;
  date: string | null;
  durationInSeconds: number | null;
  exercises: Array<{
    exercise: {
      _id: string;
      nombre: string | null;
    } | null;
    sets: Array<{
      reps: number | null;
      weight: number | null;
      weightUnit: "kg" | "lbs" | null;
      _type: "setLog";
      _key: string;
    }> | null;
    _type: "exerciseLog";
    _key: string;
  }> | null;
}>;

// Source: ../src/app/(app)/(tabs)/history/workout-record.tsx
// Variable: getWorkoutRecordQuery
// Query: *[_type == "workout" && _id == $workoutId] [0] {    _id,    date,    durationInSeconds,    exercises[] {      exercise->{        _id,        nombre,        descripcion      },      sets[] {        reps,        weight,        weightUnit,        _type,        _key,      },      _type,      _key    }  }
export type GetWorkoutRecordQueryResult = {
  _id: string;
  date: string | null;
  durationInSeconds: number | null;
  exercises: Array<{
    exercise: {
      _id: string;
      nombre: string | null;
      descripcion: string | null;
    } | null;
    sets: Array<{
      reps: number | null;
      weight: number | null;
      weightUnit: "kg" | "lbs" | null;
      _type: "setLog";
      _key: string;
    }> | null;
    _type: "exerciseLog";
    _key: string;
  }> | null;
} | null;

// Source: ../src/app/(app)/exercise-detail.tsx
// Variable: singleExerciseQuery
// Query: *[_type == "Ejercicio" && _id == $id] [0]
export type SingleExerciseQueryResult = {
  _id: string;
  _type: "Ejercicio";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  nombre?: string;
  descripcion?: string;
  dificultad?: "avanzado" | "intermedio" | "principiante";
  imagen?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  };
  videoUrl?: string;
  isActive?: boolean;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"exercise\" && lower(nombre) == lower($nombre)][0] {\n    _id,\n    nombre\n  }\n": FindExerciseQueryResult;
    "*[_type == \"Ejercicio\" && isActive == true] | order(nombre asc) {\n  _id,\n  _rev,\n  _type,\n  nombre,\n  descripcion,\n  dificultad,\n  imagen {\n  _type,\n    asset->{\n      _id,\n      url\n    },\n    alt,\n    caption\n  },\n  videoUrl,\n  isActive,\n  _createdAt,\n  _updatedAt\n}": ExercisesQueryResult;
    "\n  *[_type == \"workout\" && userId == $userId] | order(date desc) {\n    _id,\n    date,\n    durationInSeconds,\n    exercises[] {\n    exercise->{\n        _id,\n        nombre\n        },\n      sets[] {\n        reps,\n        weight,\n        weightUnit,\n        _type,\n        _key,\n      },\n        _type,\n        _key\n    }\n  }": GetWorkoutsQueryResult;
    "\n  *[_type == \"workout\" && _id == $workoutId] [0] {\n    _id,\n    date,\n    durationInSeconds,\n    exercises[] {\n      exercise->{\n        _id,\n        nombre,\n        descripcion\n      },\n      sets[] {\n        reps,\n        weight,\n        weightUnit,\n        _type,\n        _key,\n      },\n      _type,\n      _key\n    }\n  }\n": GetWorkoutRecordQueryResult;
    "*[_type == \"Ejercicio\" && _id == $id] [0]": SingleExerciseQueryResult;
  }
}
